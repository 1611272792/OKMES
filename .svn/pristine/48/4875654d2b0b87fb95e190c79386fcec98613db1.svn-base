using Microsoft.CodeDom.Providers.DotNetCompilerPlatform;
using System;
using System.CodeDom;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Services.Description;

namespace SunpnMesWeb.Common
{
    public class CallMESCall
    {
        private System.Reflection.MethodInfo mi = null;
        private object obj = null;
        /// < summary>          
        /// 动态调用web服务 
        /// < /summary>          
        /// < param name="Url">WSDL服务地址< /param>
        /// < param name="ClassName">类名< /param>  
        /// < param name="MethodName">方法名< /param>  
        /// < param name="Args">参数< /param> 
        /// < returns>< /returns>
        public object InvokeWebService(string Url, string ClassName, string MethodName, object[] Args)
        {
            if (mi == null || obj == null)
            {
                string @namespace = "EnterpriseServerBase.WebService.DynamicWebCalling";
                if ((ClassName == null) || (ClassName == ""))
                {
                    ClassName = GetWsClassName(Url);
                }
                try
                {                   //获取WSDL   
                    WebClient wc = new WebClient();
                    Stream stream = wc.OpenRead(Url + "?WSDL");
                    ServiceDescription sd = ServiceDescription.Read(stream);
                    ServiceDescriptionImporter sdi = new ServiceDescriptionImporter();
                    sdi.AddServiceDescription(sd, "", "");
                    CodeNamespace cn = new CodeNamespace(@namespace);
                    //生成客户端代理类代码          
                    CodeCompileUnit ccu = new CodeCompileUnit();
                    ccu.Namespaces.Add(cn);
                    sdi.Import(cn, ccu);
                    CSharpCodeProvider icc = new CSharpCodeProvider();
                    //设定编译参数                 
                    CompilerParameters cplist = new CompilerParameters();
                    cplist.GenerateExecutable = false;
                    cplist.GenerateInMemory = true;
                    cplist.ReferencedAssemblies.Add("System.dll");
                    cplist.ReferencedAssemblies.Add("System.XML.dll");
                    cplist.ReferencedAssemblies.Add("System.Web.Services.dll");
                    cplist.ReferencedAssemblies.Add("System.Data.dll");
                    //编译代理类                 
                    CompilerResults cr = icc.CompileAssemblyFromDom(cplist, ccu);
                    if (true == cr.Errors.HasErrors)
                    {
                        System.Text.StringBuilder sb = new System.Text.StringBuilder();
                        foreach (System.CodeDom.Compiler.CompilerError ce in cr.Errors)
                        {
                            sb.Append(ce.ToString());
                            sb.Append(System.Environment.NewLine);
                        }
                        throw new Exception(sb.ToString());
                    }
                    //生成代理实例，并调用方法   
                    System.Reflection.Assembly assembly = cr.CompiledAssembly;
                    Type t = assembly.GetType(@namespace + "." + ClassName, true, true);
                    obj = Activator.CreateInstance(t);
                    mi = t.GetMethod(MethodName);
                    // PropertyInfo propertyInfo = type.GetProperty(propertyname);     
                    //return propertyInfo.GetValue(obj, null); 
                }
                catch (Exception ex)
                {
                    throw new Exception(ex.InnerException.Message, new Exception(ex.InnerException.StackTrace));
                }
            }

            try
            {
                return mi.Invoke(obj, Args);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.InnerException.Message, new Exception(ex.InnerException.StackTrace));
            }
        }


        public string GetWsClassName(string wsUrl)
        {
            string[] parts = wsUrl.Split('/');
            string[] pps = parts[parts.Length - 1].Split('.');
            return pps[0];
        }
    }
}